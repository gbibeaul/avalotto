/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Distriburor, DistriburorInterface } from "../Distriburor";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220fc53a5b8712efae174e5ceb18a0588e61faf514775ff19d91d624bd2e0f3649964736f6c634300080a0033";

type DistriburorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DistriburorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Distriburor__factory extends ContractFactory {
  constructor(...args: DistriburorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Distriburor";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Distriburor> {
    return super.deploy(overrides || {}) as Promise<Distriburor>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Distriburor {
    return super.attach(address) as Distriburor;
  }
  connect(signer: Signer): Distriburor__factory {
    return super.connect(signer) as Distriburor__factory;
  }
  static readonly contractName: "Distriburor";
  public readonly contractName: "Distriburor";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DistriburorInterface {
    return new utils.Interface(_abi) as DistriburorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Distriburor {
    return new Contract(address, _abi, signerOrProvider) as Distriburor;
  }
}
