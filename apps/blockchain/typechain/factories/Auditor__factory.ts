/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Auditor, AuditorInterface } from "../Auditor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gamebitAuthorizations",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "RNGConsumed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "RNGFullfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "RNGRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_consumptionValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "consumeRNG",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fullfillmentNonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_fullfillmentValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "fullfillRNG",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getConsumption",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "consumptionAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "consumptionValue",
            type: "uint256",
          },
        ],
        internalType: "struct Auditor.RNGConsumption",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getFullfillment",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "fullfillmentNonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fullfillmentAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fullfillmentValue",
            type: "uint256",
          },
        ],
        internalType: "struct Auditor.RNGFullfillment",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getRequest",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "requestedBy",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestNonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "requestedAt",
            type: "uint256",
          },
        ],
        internalType: "struct Auditor.RNGRequest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getRequestState",
    outputs: [
      {
        internalType: "enum Auditor.RequestState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestNonce",
        type: "uint256",
      },
    ],
    name: "requestRNG",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200130f3803806200130f8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b6111e5806200012a6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b98c530d1161005b578063b98c530d146100ea578063bfff3a901461011a578063c58343ef1461014a578063ed979dd61461017a5761007d565b8063333f86b61461008257806335cea42d1461009e57806394eceda7146100ba575b600080fd5b61009c60048036038101906100979190610a33565b6101aa565b005b6100b860048036038101906100b39190610a73565b610420565b005b6100d460048036038101906100cf9190610ac6565b610613565b6040516100e19190610b31565b60405180910390f35b61010460048036038101906100ff9190610ac6565b610654565b6040516101119190610b5b565b60405180910390f35b610134600480360381019061012f9190610ac6565b61087a565b6040516101419190610bb8565b60405180910390f35b610164600480360381019061015f9190610ac6565b6108c5565b6040516101719190610c56565b60405180910390f35b610194600480360381019061018f9190610ac6565b61095c565b6040516101a19190610ce8565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c28af974336040518263ffffffff1660e01b81526004016102039190610d12565b602060405180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102449190610d65565b610283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027a90610e15565b60405180910390fd5b816003600083815260200190815260200160002060020154146102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d290610e81565b60405180910390fd5b600160028111156102ef576102ee610c71565b5b6005600083815260200190815260200160002060009054906101000a900460ff16600281111561032257610321610c71565b5b14610362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035990610f39565b60405180910390fd5b604051806040016040528042815260200183815250600460006001548152602001908152602001600020600082015181600001556020820151816001015590505060026005600083815260200190815260200160002060006101000a81548160ff021916908360028111156103da576103d9610c71565b5b02179055507f29173ffd77eb81e54b7da19d85e62fb96fd217bbf5c3d4548a1bb15e2d51409e600154338460405161041493929190610f59565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c28af974336040518263ffffffff1660e01b81526004016104799190610d12565b602060405180830381865afa158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba9190610d65565b6104f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f090610e15565b60405180910390fd5b6000600281111561050d5761050c610c71565b5b6005600083815260200190815260200160002060009054906101000a900460ff1660028111156105405761053f610c71565b5b14610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790611028565b60405180910390fd5b6040518060600160405280848152602001428152602001838152506003600060015481526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050507fc2f5eddd71c288839ba11fab21a3686e186d8ddfd8df6aca5126f677c8cca8a6600154338460405161060693929190610f59565b60405180910390a1505050565b61061b610986565b60046000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e2b446f336040518263ffffffff1660e01b81526004016106b09190610d12565b602060405180830381865afa1580156106cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f19190610d65565b610730576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610727906110ba565b60405180910390fd5b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018381526020014281525060026000600154815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155905050600060056000600154815260200190815260200160002060006101000a81548160ff0219169083600281111561080d5761080c610c71565b5b02179055507f491187701e3536bcaee43eff2721c1f3b17ffc8ee8a55b83ae0b48436b7137ec600154336040516108459291906110da565b60405180910390a16001600081548092919061086090611132565b919050555060018054610873919061117b565b9050919050565b6108826109a0565b6003600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b6108cd6109c1565b600260008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050919050565b60006005600083815260200190815260200160002060009054906101000a900460ff169050919050565b604051806040016040528060008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600080fd5b6000819050919050565b610a10816109fd565b8114610a1b57600080fd5b50565b600081359050610a2d81610a07565b92915050565b60008060408385031215610a4a57610a496109f8565b5b6000610a5885828601610a1e565b9250506020610a6985828601610a1e565b9150509250929050565b600080600060608486031215610a8c57610a8b6109f8565b5b6000610a9a86828701610a1e565b9350506020610aab86828701610a1e565b9250506040610abc86828701610a1e565b9150509250925092565b600060208284031215610adc57610adb6109f8565b5b6000610aea84828501610a1e565b91505092915050565b610afc816109fd565b82525050565b604082016000820151610b186000850182610af3565b506020820151610b2b6020850182610af3565b50505050565b6000604082019050610b466000830184610b02565b92915050565b610b55816109fd565b82525050565b6000602082019050610b706000830184610b4c565b92915050565b606082016000820151610b8c6000850182610af3565b506020820151610b9f6020850182610af3565b506040820151610bb26040850182610af3565b50505050565b6000606082019050610bcd6000830184610b76565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bfe82610bd3565b9050919050565b610c0e81610bf3565b82525050565b606082016000820151610c2a6000850182610c05565b506020820151610c3d6020850182610af3565b506040820151610c506040850182610af3565b50505050565b6000606082019050610c6b6000830184610c14565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610cb157610cb0610c71565b5b50565b6000819050610cc282610ca0565b919050565b6000610cd282610cb4565b9050919050565b610ce281610cc7565b82525050565b6000602082019050610cfd6000830184610cd9565b92915050565b610d0c81610bf3565b82525050565b6000602082019050610d276000830184610d03565b92915050565b60008115159050919050565b610d4281610d2d565b8114610d4d57600080fd5b50565b600081519050610d5f81610d39565b92915050565b600060208284031215610d7b57610d7a6109f8565b5b6000610d8984828501610d50565b91505092915050565b600082825260208201905092915050565b7f4f6e6c7920524e47206f7261636c6520697320616c6c6f77656420746f20636160008201527f6c6c20746869732066756e6374696f6e00000000000000000000000000000000602082015250565b6000610dff603083610d92565b9150610e0a82610da3565b604082019050919050565b60006020820190508181036000830152610e2e81610df2565b9050919050565b7f496e76616c696420524e47000000000000000000000000000000000000000000600082015250565b6000610e6b600b83610d92565b9150610e7682610e35565b602082019050919050565b60006020820190508181036000830152610e9a81610e5e565b9050919050565b7f546869732072657175657374206973206e6f7420696e2066756c6c66696c6c6560008201527f642073746174652c206f6e6c792066756c6c66696c6c6564207265717565737460208201527f732063616e20626520636f6e73756d6564000000000000000000000000000000604082015250565b6000610f23605183610d92565b9150610f2e82610ea1565b606082019050919050565b60006020820190508181036000830152610f5281610f16565b9050919050565b6000606082019050610f6e6000830186610b4c565b610f7b6020830185610d03565b610f886040830184610b4c565b949350505050565b7f546869732072657175657374206973206e6f7420696e2072657175657374656460008201527f2073746174652c206f6e6c7920726571756573746564206e6f6e20636f6e737560208201527f6d65642072657175657374732063616e2062652066756c6c66696c6c65640000604082015250565b6000611012605e83610d92565b915061101d82610f90565b606082019050919050565b6000602082019050818103600083015261104181611005565b9050919050565b7f4f6e6c79616e2020524e4720417574686f72697a65642047616d652063616e2060008201527f63616c6c20746869732066756e6374696f6e0000000000000000000000000000602082015250565b60006110a4603283610d92565b91506110af82611048565b604082019050919050565b600060208201905081810360008301526110d381611097565b9050919050565b60006040820190506110ef6000830185610b4c565b6110fc6020830184610d03565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113d826109fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111705761116f611103565b5b600182019050919050565b6000611186826109fd565b9150611191836109fd565b9250828210156111a4576111a3611103565b5b82820390509291505056fea2646970667358221220f49a089e7e9e7a1556b9ef613fda0eb6fd2a244143c1493f928c2e0314bb530d64736f6c634300080a0033";

type AuditorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuditorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Auditor__factory extends ContractFactory {
  constructor(...args: AuditorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Auditor";
  }

  deploy(
    _gamebitAuthorizations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Auditor> {
    return super.deploy(
      _gamebitAuthorizations,
      overrides || {}
    ) as Promise<Auditor>;
  }
  getDeployTransaction(
    _gamebitAuthorizations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gamebitAuthorizations, overrides || {});
  }
  attach(address: string): Auditor {
    return super.attach(address) as Auditor;
  }
  connect(signer: Signer): Auditor__factory {
    return super.connect(signer) as Auditor__factory;
  }
  static readonly contractName: "Auditor";
  public readonly contractName: "Auditor";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuditorInterface {
    return new utils.Interface(_abi) as AuditorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Auditor {
    return new Contract(address, _abi, signerOrProvider) as Auditor;
  }
}
