/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Auditor, AuditorInterface } from "../Auditor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gamebitAuthorizations",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "RNGConsumed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "RNGFullfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "RNGRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_consumptionValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "consumeRNG",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fullfillmentNonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_fullfillmentValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "fullfillRNG",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getConsumption",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "consumptionAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "consumptionValue",
            type: "uint256",
          },
        ],
        internalType: "struct Auditor.RNGConsumption",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getFullfillment",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "fullfillmentNonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fullfillmentAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "fullfillmentValue",
            type: "uint256",
          },
        ],
        internalType: "struct Auditor.RNGFullfillment",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getRequest",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "requestedBy",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestNonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "requestedAt",
            type: "uint256",
          },
        ],
        internalType: "struct Auditor.RNGRequest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
    ],
    name: "getRequestState",
    outputs: [
      {
        internalType: "enum Auditor.RequestState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestNonce",
        type: "uint256",
      },
    ],
    name: "logRNGRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";

type AuditorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuditorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Auditor__factory extends ContractFactory {
  constructor(...args: AuditorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Auditor";
  }

  deploy(
    _gamebitAuthorizations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Auditor> {
    return super.deploy(
      _gamebitAuthorizations,
      overrides || {}
    ) as Promise<Auditor>;
  }
  getDeployTransaction(
    _gamebitAuthorizations: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gamebitAuthorizations, overrides || {});
  }
  attach(address: string): Auditor {
    return super.attach(address) as Auditor;
  }
  connect(signer: Signer): Auditor__factory {
    return super.connect(signer) as Auditor__factory;
  }
  static readonly contractName: "Auditor";
  public readonly contractName: "Auditor";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuditorInterface {
    return new utils.Interface(_abi) as AuditorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Auditor {
    return new Contract(address, _abi, signerOrProvider) as Auditor;
  }
}
