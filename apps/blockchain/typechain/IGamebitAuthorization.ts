/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IGamebitAuthorizationInterface extends utils.Interface {
  contractName: "IGamebitAuthorization";
  functions: {
    "isAmountEnoughProfit(address,uint256)": FunctionFragment;
    "isAuditor(address)": FunctionFragment;
    "isAuthorizedOracle(address)": FunctionFragment;
    "isAuthorizedRNG(address)": FunctionFragment;
    "isGameAuthorized(address)": FunctionFragment;
    "isGameGameProfitAuthorized(address)": FunctionFragment;
    "isGamePlayProfitAuthorized(address)": FunctionFragment;
    "isOfficialOracle(address)": FunctionFragment;
    "isOfficialRng(address)": FunctionFragment;
    "isStaff(address)": FunctionFragment;
    "isStaffEnabled()": FunctionFragment;
    "isStaffOrGovApproved(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isAmountEnoughProfit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isAuditor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedRNG",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameGameProfitAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGamePlayProfitAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOfficialOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOfficialRng",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isStaff", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStaffEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStaffOrGovApproved",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isAmountEnoughProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAuditor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedRNG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameGameProfitAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGamePlayProfitAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOfficialOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOfficialRng",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isStaff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStaffEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStaffOrGovApproved",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGamebitAuthorization extends BaseContract {
  contractName: "IGamebitAuthorization";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGamebitAuthorizationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isAmountEnoughProfit(
      _game: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAuditor(_auditor: string, overrides?: CallOverrides): Promise<[boolean]>;

    isAuthorizedOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAuthorizedRNG(
      _rng: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGameAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGameGameProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGamePlayProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOfficialOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOfficialRng(_rng: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStaff(_staff: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStaffEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isStaffOrGovApproved(
      _requester: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  isAmountEnoughProfit(
    _game: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAuditor(_auditor: string, overrides?: CallOverrides): Promise<boolean>;

  isAuthorizedOracle(
    _oracle: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAuthorizedRNG(_rng: string, overrides?: CallOverrides): Promise<boolean>;

  isGameAuthorized(_game: string, overrides?: CallOverrides): Promise<boolean>;

  isGameGameProfitAuthorized(
    _game: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGamePlayProfitAuthorized(
    _game: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOfficialOracle(
    _oracle: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOfficialRng(_rng: string, overrides?: CallOverrides): Promise<boolean>;

  isStaff(_staff: string, overrides?: CallOverrides): Promise<boolean>;

  isStaffEnabled(overrides?: CallOverrides): Promise<boolean>;

  isStaffOrGovApproved(
    _requester: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    isAmountEnoughProfit(
      _game: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAuditor(_auditor: string, overrides?: CallOverrides): Promise<boolean>;

    isAuthorizedOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAuthorizedRNG(_rng: string, overrides?: CallOverrides): Promise<boolean>;

    isGameAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGameGameProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGamePlayProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOfficialOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOfficialRng(_rng: string, overrides?: CallOverrides): Promise<boolean>;

    isStaff(_staff: string, overrides?: CallOverrides): Promise<boolean>;

    isStaffEnabled(overrides?: CallOverrides): Promise<boolean>;

    isStaffOrGovApproved(
      _requester: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    isAmountEnoughProfit(
      _game: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuditor(_auditor: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorizedOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorizedRNG(
      _rng: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGameAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGameGameProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGamePlayProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOfficialOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOfficialRng(_rng: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStaff(_staff: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStaffEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isStaffOrGovApproved(
      _requester: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isAmountEnoughProfit(
      _game: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuditor(
      _auditor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorizedOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorizedRNG(
      _rng: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGameAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGameGameProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGamePlayProfitAuthorized(
      _game: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOfficialOracle(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOfficialRng(
      _rng: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStaff(
      _staff: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStaffEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStaffOrGovApproved(
      _requester: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
