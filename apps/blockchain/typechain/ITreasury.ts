/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ITreasuryInterface extends utils.Interface {
  contractName: "ITreasury";
  functions: {
    "acceptPlay(uint256,uint256)": FunctionFragment;
    "distributePlayWinnings(uint256,address)": FunctionFragment;
    "payGameSessionWinnings(uint256,uint256,address)": FunctionFragment;
    "receiveRngPayment()": FunctionFragment;
    "sendAvax(uint256,address,string)": FunctionFragment;
    "takeGameSessionBet(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptPlay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributePlayWinnings",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payGameSessionWinnings",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRngPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendAvax",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "takeGameSessionBet",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptPlay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributePlayWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payGameSessionWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRngPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendAvax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeGameSessionBet",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITreasury extends BaseContract {
  contractName: "ITreasury";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptPlay(
      _amount: BigNumberish,
      _profits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributePlayWinnings(
      _winning: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payGameSessionWinnings(
      _winning: BigNumberish,
      _profits: BigNumberish,
      _winner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receiveRngPayment(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendAvax(
      _amount: BigNumberish,
      _sendTo: string,
      _assetType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeGameSessionBet(
      _bet: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptPlay(
    _amount: BigNumberish,
    _profits: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributePlayWinnings(
    _winning: BigNumberish,
    _winner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payGameSessionWinnings(
    _winning: BigNumberish,
    _profits: BigNumberish,
    _winner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receiveRngPayment(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendAvax(
    _amount: BigNumberish,
    _sendTo: string,
    _assetType: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeGameSessionBet(
    _bet: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptPlay(
      _amount: BigNumberish,
      _profits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributePlayWinnings(
      _winning: BigNumberish,
      _winner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payGameSessionWinnings(
      _winning: BigNumberish,
      _profits: BigNumberish,
      _winner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveRngPayment(overrides?: CallOverrides): Promise<void>;

    sendAvax(
      _amount: BigNumberish,
      _sendTo: string,
      _assetType: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takeGameSessionBet(
      _bet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptPlay(
      _amount: BigNumberish,
      _profits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributePlayWinnings(
      _winning: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payGameSessionWinnings(
      _winning: BigNumberish,
      _profits: BigNumberish,
      _winner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receiveRngPayment(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendAvax(
      _amount: BigNumberish,
      _sendTo: string,
      _assetType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeGameSessionBet(
      _bet: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptPlay(
      _amount: BigNumberish,
      _profits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributePlayWinnings(
      _winning: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payGameSessionWinnings(
      _winning: BigNumberish,
      _profits: BigNumberish,
      _winner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receiveRngPayment(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendAvax(
      _amount: BigNumberish,
      _sendTo: string,
      _assetType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeGameSessionBet(
      _bet: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
