/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Auditor {
  export type RNGConsumptionStruct = {
    consumptionAt: BigNumberish;
    consumptionValue: BigNumberish;
  };

  export type RNGConsumptionStructOutput = [BigNumber, BigNumber] & {
    consumptionAt: BigNumber;
    consumptionValue: BigNumber;
  };

  export type RNGFullfillmentStruct = {
    fullfillmentNonce: BigNumberish;
    fullfillmentAt: BigNumberish;
    fullfillmentValue: BigNumberish;
  };

  export type RNGFullfillmentStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fullfillmentNonce: BigNumber;
    fullfillmentAt: BigNumber;
    fullfillmentValue: BigNumber;
  };

  export type RNGRequestStruct = {
    requestedBy: string;
    requestNonce: BigNumberish;
    requestedAt: BigNumberish;
  };

  export type RNGRequestStructOutput = [string, BigNumber, BigNumber] & {
    requestedBy: string;
    requestNonce: BigNumber;
    requestedAt: BigNumber;
  };
}

export interface AuditorInterface extends utils.Interface {
  contractName: "Auditor";
  functions: {
    "consumeRNG(uint256,uint256)": FunctionFragment;
    "fullfillRNG(uint256,uint256,uint256)": FunctionFragment;
    "getConsumption(uint256)": FunctionFragment;
    "getFullfillment(uint256)": FunctionFragment;
    "getRequest(uint256)": FunctionFragment;
    "getRequestState(uint256)": FunctionFragment;
    "logRNGRequest(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "consumeRNG",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullfillRNG",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsumption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullfillment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logRNGRequest",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "consumeRNG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullfillRNG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsumption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logRNGRequest",
    data: BytesLike
  ): Result;

  events: {
    "RNGConsumed(uint256,address,uint256)": EventFragment;
    "RNGFullfilled(uint256,address,uint256)": EventFragment;
    "RNGRequested(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RNGConsumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RNGFullfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RNGRequested"): EventFragment;
}

export type RNGConsumedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { id: BigNumber; requester: string; value: BigNumber }
>;

export type RNGConsumedEventFilter = TypedEventFilter<RNGConsumedEvent>;

export type RNGFullfilledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { id: BigNumber; requester: string; value: BigNumber }
>;

export type RNGFullfilledEventFilter = TypedEventFilter<RNGFullfilledEvent>;

export type RNGRequestedEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; requester: string }
>;

export type RNGRequestedEventFilter = TypedEventFilter<RNGRequestedEvent>;

export interface Auditor extends BaseContract {
  contractName: "Auditor";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuditorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    consumeRNG(
      _consumptionValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fullfillRNG(
      _fullfillmentNonce: BigNumberish,
      _fullfillmentValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConsumption(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Auditor.RNGConsumptionStructOutput]>;

    getFullfillment(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Auditor.RNGFullfillmentStructOutput]>;

    getRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Auditor.RNGRequestStructOutput]>;

    getRequestState(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    logRNGRequest(
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  consumeRNG(
    _consumptionValue: BigNumberish,
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fullfillRNG(
    _fullfillmentNonce: BigNumberish,
    _fullfillmentValue: BigNumberish,
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConsumption(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Auditor.RNGConsumptionStructOutput>;

  getFullfillment(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Auditor.RNGFullfillmentStructOutput>;

  getRequest(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Auditor.RNGRequestStructOutput>;

  getRequestState(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  logRNGRequest(
    _requestNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    consumeRNG(
      _consumptionValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fullfillRNG(
      _fullfillmentNonce: BigNumberish,
      _fullfillmentValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getConsumption(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Auditor.RNGConsumptionStructOutput>;

    getFullfillment(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Auditor.RNGFullfillmentStructOutput>;

    getRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Auditor.RNGRequestStructOutput>;

    getRequestState(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    logRNGRequest(
      _requestNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "RNGConsumed(uint256,address,uint256)"(
      id?: null,
      requester?: null,
      value?: null
    ): RNGConsumedEventFilter;
    RNGConsumed(
      id?: null,
      requester?: null,
      value?: null
    ): RNGConsumedEventFilter;

    "RNGFullfilled(uint256,address,uint256)"(
      id?: null,
      requester?: null,
      value?: null
    ): RNGFullfilledEventFilter;
    RNGFullfilled(
      id?: null,
      requester?: null,
      value?: null
    ): RNGFullfilledEventFilter;

    "RNGRequested(uint256,address)"(
      id?: null,
      requester?: null
    ): RNGRequestedEventFilter;
    RNGRequested(id?: null, requester?: null): RNGRequestedEventFilter;
  };

  estimateGas: {
    consumeRNG(
      _consumptionValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fullfillRNG(
      _fullfillmentNonce: BigNumberish,
      _fullfillmentValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConsumption(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullfillment(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestState(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    logRNGRequest(
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    consumeRNG(
      _consumptionValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fullfillRNG(
      _fullfillmentNonce: BigNumberish,
      _fullfillmentValue: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConsumption(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullfillment(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestState(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    logRNGRequest(
      _requestNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
